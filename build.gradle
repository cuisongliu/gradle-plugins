/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 cuisongliu@qq.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
def baseUrl = "http://maven.cuisongliu.com"
def nexusUrl = "$baseUrl/content/groups/public/"

task printEnv {
    println "当前的工程名称为:[$project.name]"
    repositories.each {
        println "repository: ${it.name} ('${it.url}')"
    }
}

allprojects {
    group 'com.cuisongliu.plugin'
    version = '1.0'

    repositories {
        mavenLocal()
        maven { url "$nexusUrl" }
        mavenCentral()
        jcenter()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'groovy'

    // JVM 版本号要求
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
    // java编译的时候缺省状态下会因为中文字符而失败
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-Xlint:unchecked"
    }
    ext {
        // dependencies
        generatorVersion="1.3.5"
        mapperVersion = "3.4.0"
        druidVersion="1.0+"
    }
    configurations {
        optional
        compile.extendsFrom optional
    }

    dependencies {
        //gradle sdk
        compile gradleApi()
        compile localGroovy()
        testCompile "junit:junit:4.12"
    }

    sourceSets {
        main {
            groovy { srcDirs = ['src/main/groovy','src/main/java']}  // compile everything in src/ with groovy
            java { srcDirs = []}    // no source dirs for the java compiler

            resources {
                srcDir 'src/main/resources'
                include '**/*'

                srcDir 'src/main/java'
                include '**/*'
                exclude '**/*.java'

                srcDir 'src/main/groovy'
                include '**/*'
                exclude '**/*.groovy'
            }
        }

        test {
            groovy { srcDirs = ['src/test/groovy','src/test/java']}  // compile everything in src/ with groovy
            java { srcDirs = []}    // no source dirs for the java compiler
            
            resources {
                srcDir 'src/test/resources'
                include '**/*'

                srcDir 'src/test/java'
                include '**/*'
                exclude '**/*.java'

                srcDir 'src/test/groovy'
                include '**/*'
                exclude '**/*.groovy'
            }
        }

    }

    //打包源代码
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    groovydoc {
        docTitle  "${project.name}"
    }

    task groovydocZip(type: Zip, dependsOn: groovydoc) {
        classifier = 'groovydoc'
        from groovydoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives groovydocZip
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java

                artifact sourcesJar
                artifact groovydocZip

                pom.withXml {
                    asNode().dependencies.dependency.findAll { xmlDep ->
                        // mark optional dependencies
                        if (project.configurations.optional.allDependencies.findAll { dep ->
                            xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                        }) {
                            def xmlOptional = xmlDep.optional[0];
                            if (!xmlOptional) {
                                xmlOptional = xmlDep.appendNode('optional')
                            }
                            xmlOptional.value = 'true';
                        }

                        // fix maven-publish issue when all maven dependencies are placed into runtime scope
                        if (project.configurations.compile.allDependencies.findAll { dep ->
                            xmlDep.groupId.text() == dep.group && xmlDep.artifactId.text() == dep.name
                        }) {
                            def xmlScope = xmlDep.scope[0];
                            if (!xmlScope) {
                                xmlScope = xmlDep.appendNode('scope')
                            }
                            xmlScope.value = 'compile';
                        }
                    }
                }
            }
        }
    }
}
//全部删除构建文件
task clean(type: Delete) {
    delete rootProject.buildDir
}
